{"mappings":"kgBAGA,MAsEMA,EAAOC,OAAOC,SAASC,OAASF,OAAOC,SAASC,KAAKC,MAAM,IAC9DH,OAAOC,SAASG,SAAWJ,OAAOC,SAASG,OAAOD,MAAM,OACtDE,KAAKC,UAAY,GAAK,GAAK,IAE1BC,EADQC,EAAAC,MAAMC,OAAO,IAAIF,EAAAG,OAAOH,EAAAG,OAAOC,KAAKb,KAAO,GACpCK,OAAO,CAACS,OAAQ,IAAKC,WAAW,EAAOC,MAAO,KACnE,GAAM,SAAUR,EAET,CACL,MAAMS,EAAUC,SAASC,eAAe,WAClCC,EAAMC,EAAAC,cAAc,OAC1BF,EAAIG,YAAW,0BAA6Bf,EAAOgB,KAAKC,0BAA0BjB,EAAOkB,kBACzFT,EAAQU,YAAYP,GACpBH,EAAQU,YAAYN,EAAAC,cAAc,OAClCL,EAAQU,YAnFE,EAAIH,EAAgBI,KAC9B,MAAMC,EAAqB,GACrBC,EAAkB,GAElBC,EAAOV,EAAAC,cAAc,OAE3B,IAAIF,EAAMC,EAAAC,cAAc,MAAO,SAC3BU,EAAO,GACPC,EAAQ,EACRC,EAAKb,EAAAC,cAAc,MACvB,IAAK,MAAMa,KAAQP,EAEjB,GADcO,EAAKC,WAAW,MAgDvB,CACL,MAAMC,EAAKhB,EAAAC,cAAc,MACzBe,EAAGd,YAAcY,EACjBD,EAAGP,YAAYU,OAlDL,CAQV,GAPIJ,IACFb,EAAIO,YAAYO,GAChBA,EAAKb,EAAAC,cAAc,MACnBS,EAAKJ,YAAYP,GACjBA,EAAMC,EAAAC,cAAc,MAAO,UAGzBE,EAAKS,EAAQ,GAAI,CACnB,MAAMK,EAAI7B,EAAAC,MAAM6B,WAAWf,EAAKS,EAAQ,IAClCO,EACJR,EAAKI,WAAW,YAAc3B,EAAAgC,KAAI,UAAWC,KAAKV,GAAO,IAAIW,GAC3DX,EAAKI,WAAW,OAAS3B,EAAAgC,KAAI,uCAAwCC,KAAKV,GAAO,IAAIW,QACrFC,EACJvB,EAAAwB,MAAMP,EAAET,SAAUA,EAAUW,GAC5BnB,EAAAwB,MAAMP,EAAER,UAAWA,EAAWU,GAE9B,MAAMM,EAAWzB,EAAAC,cAAc,MAAO,SACtCwB,EAASnB,YAAYN,EAAA0B,YAAYT,EAAGT,EAAUC,IAE9C,MAAMkB,EAAU3B,EAAAC,cAAc,MAAO,WAC/B2B,EAAU5B,EAAAC,cAAc,WACxB4B,EAAU7B,EAAAC,cAAc,WAE9B,IAAI6B,EAAO9B,EAAAC,cAAc,QACrB8B,EAAM/B,EAAAC,cAAc,OACxB8B,EAAI7B,YAAcC,EAAKS,EAAQ,GAC/BkB,EAAKxB,YAAYyB,GACjBF,EAAQvB,YAAYwB,GACpBF,EAAQtB,YAAYuB,GAEpBC,EAAO9B,EAAAC,cAAc,QACrB8B,EAAM/B,EAAAC,cAAc,OACpB8B,EAAI7B,YAAce,EAAEe,OAAOC,KAAG,EAAGC,IAAAA,EAAGC,MAAEA,KAAM,GAAQD,OAASC,EAAMC,QAAQ,OAAMC,KAAK,MACtFP,EAAKxB,YAAYyB,GACjBH,EAAQtB,YAAYwB,GACpBH,EAAQrB,YAAYsB,GACpBH,EAASnB,YAAYqB,GAErBjB,EAAKJ,YAAYmB,GAEnBd,EAAOG,EACPF,IAEA,MAAM0B,EAAOtC,EAAAC,cAAc,QAC3BqC,EAAKC,UAAYzB,EAAK0B,QAAO,YAAA,CAAcC,EAAGC,IAAS,OAAYA,WACnE3C,EAAIO,YAAYgC,GASpB,OAFA5B,EAAKJ,YAAYP,GAEVW,GAgBaiC,CAAOxD,EAAOgB,KAAMhB,EAAOoB,aAP/CqC,QAAQC,MAAK,2BAA4B1D,EAAOkB","sources":["html/trace/trace.ts"],"sourcesContent":["import {State, Random, ID, DeckID, DATA} from '../../src';\nimport {createElement, track, renderState} from '../common';\n\nconst render = (path: string[], trace: string[]) => {\n  const banished: DeckID[] = [];\n  const graveyard: ID[] = [];\n\n  const root = createElement('div');\n\n  let div = createElement('div', 'trace');\n  let last = '';\n  let major = 0;\n  let ul = createElement('ul');\n  for (const line of trace) {\n    const minor = line.startsWith('  ');\n    if (!minor) {\n      if (major) {\n        div.appendChild(ul);\n        ul = createElement('ul');\n        root.appendChild(div);\n        div = createElement('div', 'trace');\n      }\n\n      if (path[major - 1]) {\n        const s = State.fromString(path[major - 1]);\n        const activated =\n          last.startsWith('Activate') ? DATA[/\"(.*?)\"/.exec(last)![1]].id\n          : last.startsWith('Set') ? DATA[/then activate(?: face-down)? \"(.*?)\"/.exec(last)![1]].id\n          : undefined;\n        track(s.banished, banished, activated);\n        track(s.graveyard, graveyard, activated);\n\n        const rendered = createElement('div', 'state');\n        rendered.appendChild(renderState(s, banished, graveyard));\n\n        const wrapper = createElement('div', 'wrapper');\n        const details = createElement('details');\n        const summary = createElement('summary');\n\n        let code = createElement('code');\n        let pre = createElement('pre');\n        pre.textContent = path[major - 1];\n        code.appendChild(pre);\n        summary.appendChild(code);\n        details.appendChild(summary);\n\n        code = createElement('code');\n        pre = createElement('pre');\n        pre.textContent = s.next().map(({key, score}) => `${key} = ${score.toFixed(2)}`).join('\\n');\n        code.appendChild(pre);\n        details.appendChild(code);\n        wrapper.appendChild(details);\n        rendered.appendChild(wrapper);\n\n        root.appendChild(rendered);\n      }\n      last = line;\n      major++;\n\n      const span = createElement('span');\n      span.innerHTML = line.replace(/\"(.*?)\"/g, (_, g: string) => `\"<b>${g}</b>\"`);\n      div.appendChild(span);\n    } else {\n      const li = createElement('li');\n      li.textContent = line;\n      ul.appendChild(li);\n    }\n  }\n  root.appendChild(div);\n\n  return root;\n};\n\nconst num = (window.location.hash && +window.location.hash.slice(1)) ||\n  (window.location.search && +window.location.search.slice(1)) ||\n  ~~(Math.random() * (2 ** 31 - 1));\nconst state = State.create(new Random(Random.seed(num)), true);\nconst result = state.search({cutoff: 1e7, prescient: false, width: 0.5});\nif (!('path' in result)) {\n  console.error(`Unsuccessfully searched ${result.visited} states`);\n} else {\n  const content = document.getElementById('content')!;\n  const div = createElement('div');\n  div.textContent = `Found a path of length ${result.path.length} after searching ${result.visited} states:`;\n  content.appendChild(div);\n  content.appendChild(createElement('br'));\n  content.appendChild(render(result.path, result.trace!));\n}\n"],"names":["$4728382ffb959750$var$num","window","location","hash","slice","search","Math","random","$4728382ffb959750$var$result","$l7khe","State","create","Random","seed","cutoff","prescient","width","content","document","getElementById","div","$iPHaw","createElement","textContent","path","length","visited","appendChild","trace","banished","graveyard","root","last","major","ul","line","startsWith","li","s","fromString","activated","DATA","exec","id","undefined","track","rendered","renderState","wrapper","details","summary","code","pre","next","map","key","score","toFixed","join","span","innerHTML","replace","_","g","$4728382ffb959750$var$render","console","error"],"version":3,"file":"index.bbebac0d.js.map"}