#!/usr/bin/env node
require('source-map-support').install();

const fs = require('fs');
const path = require('path');

const workerpool = require('workerpool');

const {State, Random} = require('./build');

const TIMEOUT = 60 * 60 * 1000;
const CUTOFF = 2e7;

const hhmmss = (ms, round = true) => {
  let s = ms / 1000;
  const h = Math.floor(s / 3600);
  const m = Math.floor((s - (h * 3600)) / 60);
  s = s - (h * 3600) - (m * 60);
  if (round) s = Math.round(s);

  const mm = m < 10 ? `0${m}` : `${m}`;
  const ss = s < 10 ? `0${s}` : `${s}`;
  if (h > 0) {
    const hh = h < 10 ? `0${h}` : `${h}`;
    return `${hh}h${mm}m${ss}s`;
  } else {
    return `${mm}m${ss}s`;
  }
};

(async () => {
  const seeds = [];
  if (process.argv.length < 3) process.exit(1);
  if (isNaN(+process.argv[2])) {
    for (const line of fs.readFileSync(process.argv[2], 'utf8').split('\n')) {
      if (!line) continue;
      seeds.push(Random.seed(+line));
    }
  } else {
    seeds.push(Random.seed(+process.argv[2]));
  }

  const pool = workerpool.pool(path.join(__dirname, 'tools', 'worker.js'));
  for (const seed of seeds) {
    const searches = [];
    for (const width of [0.5, 0, 10, 0.25, 5, 0.1, 15]) {
      for (const prescient of [true, false]) {
        const search = `${prescient ? 'prescient' : 'non-prescient'} ${width === 0 ? 'best-first' : 'BULB'} search${width ? ` (width=${width})` : ''}`;
        searches.push(pool.exec('search', [seed, CUTOFF, prescient, width]).timeout(TIMEOUT).then(result => {
          if (result[0] === 'success') {
            console.log(`Found a path of length ${result[4].length} in ${hhmmss(result[1])} after searching ${result[3]} states using ${search}:\n${State.display(result[4], result[5])}`);
            pool.terminate(true);
          } else if (result[0] === 'fail') {
            console.log(`Searched all ${result[3]} states in ${hhmmss(result[1])} with ${search} and did not find any winning path.`);
            // NOTE: we can only terminate if prescient because non-prescient might report failures due to having a smaller search space
            if (prescient) pool.terminate(true);
          } else {
            console.log(`Gave up after searching ${CUTOFF} states in ${hhmmss(result[1])} with ${search} due to exhaustion.`);
          }
          return result;
        }).catch(err => {
          if (err instanceof workerpool.Promise.TimeoutError) {
            console.log(`Timed out after ${hhmmss(TIMEOUT)} of searching using ${search}.`);
          } else {
            console.log(`Crashed which searching using ${search}: ${e}`);
          }
        }));
      }
    }

    await Promise.all(searches);
  }
})();
