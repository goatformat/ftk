#!/usr/bin/env node
require('source-map-support').install();

const fs = require('fs');
const path = require('path');
const {execFileSync} = require('child_process');

const workerpool = require('workerpool');
const ProgressBar = require('progress');

const {Random} = require('../build');
const {hhmmss, maxWorkers} = require('./utils');

const TIMEOUT = 20 * 60 * 1000;
const CUTOFF = 1e7;

const csv = path.join(__dirname, 'logs', 'results.csv');
const old = path.join(__dirname, 'logs', 'results.old.csv');
try {
  fs.copyFileSync(csv, old);
} catch (e) {
  if (e.code !== 'ENOENT') throw e;
}
const pool = workerpool.pool(path.join(__dirname, 'worker.js'), {maxWorkers: maxWorkers(CUTOFF)});

(async () => {
  const results = [];
  const start = Date.now();
  const n = +process.argv[2] || 1000;
  const width = +process.argv[3] || undefined;

  const progress = new ProgressBar('[:bar] :current/:total (:percent) | :elapsed/:etas', {
    total: n,
    incomplete: ' ',
  });
  const interval = setInterval(() => progress.render(), 1000);

  for (let i = 0; i < n; i++) {
    results.push(pool.exec('search', [Random.seed(i), CUTOFF, true, width]).timeout(TIMEOUT).then(result => {
      progress.tick();
      return result;
    }).catch(err => {
      progress.tick();
      if (err instanceof workerpool.Promise.TimeoutError) {
        return ['exhaust', TIMEOUT, undefined, undefined, undefined];
      } else {
        return ['crash', 0, undefined, undefined, undefined];
      }
    }));
  }

  // Not really much point in turning this into a write stream as we're collecting all the results
  // in memory first anyway to be able to order them correctly.
  const out = (await Promise.all(results)).map(
    ([result, duration, hand, visited, p]) => [result, duration, hand, visited, p?.length].join(','));
  fs.writeFileSync(csv, `result,duration,hand,visited,path\n${out.join('\n')}`);

  pool.terminate();
  clearInterval(interval);
  progress.terminate();

  console.log(`Finished all ${n} searches in ${hhmmss(Date.now() - start)}`);
  if (fs.existsSync(old)) {
    execFileSync(path.join(__dirname, 'compare'), [old, csv], {stdio: 'inherit'});
  } else {
    execFileSync(path.join(__dirname, 'compare'), [csv], {stdio: 'inherit'});
  }
})();
