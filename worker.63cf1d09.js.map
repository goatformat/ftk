{"mappings":"kgBAIAA,EAAAC,OAAkB,CAChBC,OAAM,CAAGC,EAAWC,EAAcC,EAAgBC,GAAY,EAAOC,EAAQ,KAC3E,MAAMC,EAAQC,EAAAC,MAAMC,OAAOR,GAE3BK,EAAMI,OAAS,IAAIH,EAAAI,OAAOT,GAC1BI,EAAMM,UAEN,IACE,MAAMC,EAASP,EAAMN,OAAO,QAACG,YAAQC,QAAWC,IAChD,MAAO,SAAUQ,EAASA,EAAOC,KAAKC,OAAS,EAC/C,MAAOC,GACP,GAAIA,aAAeC,WAAY,OAAO,EACtC,MAAMD","sources":["html/sim/worker.ts"],"sourcesContent":["import * as workerpool from 'workerpool';\n\nimport {State, Random} from '../../src';\n\nworkerpool.worker({\n  search: (s: string, seed: number, cutoff: number, prescient = false, width = 0) => {\n    const state = State.decode(s);\n    // We don't know the actual state of the deck, so we reseed and shuffle\n    state.random = new Random(seed);\n    state.shuffle();\n\n    try {\n      const result = state.search({cutoff, prescient, width});\n      return 'path' in result ? result.path.length : 0;\n    } catch (err) {\n      if (err instanceof RangeError) return -1;\n      throw err;\n    }\n  },\n});\n"],"names":["$ahpAG","worker","search","s","seed","cutoff","prescient","width","state","$l7khe","State","decode","random","Random","shuffle","result","path","length","err","RangeError"],"version":3,"file":"worker.63cf1d09.js.map"}